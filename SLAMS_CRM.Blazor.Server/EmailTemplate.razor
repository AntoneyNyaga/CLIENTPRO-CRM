@inject TemplateService templateService
@inject ContactService contactService // Inject the service or repository class

@page "/email"
@using MimeKit
@using MailKit.Net.Smtp
@using Microsoft.Extensions.Configuration
@using SLAMS_CRM.Module.BusinessObjects.CustomerManagement


<style>
    .email-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-send {
        display: inline-block;
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .btn-send:hover {
            background-color: #0056b3;
        }

    .message {
        margin-top: 20px;
        padding: 10px;
        font-size: 14px;
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .success-message {
        color: green;
    }

    .error-message {
        color: red;
    }
</style>

<div class="email-container">

    <div class="form-group">
        <label class="form-label" for="contact">Select Contact:</label>
        <select class="form-control" id="contact" @bind="selectedContactId">
            <option value="">-- Select Contact --</option>
            @foreach (var contact in contacts)
            {
                <option value="@contact.Account.Name">@contact.Account.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label class="form-label" for="name">Name:</label>
        <input class="form-control" type="text" id="name" @bind="name" />
    </div>

    <div class="form-group">
        <label class="form-label" for="message">Message:</label>
        <textarea class="form-control" id="message" @bind="message"></textarea>
    </div>

    <button class="btn-send" @onclick="SendEmail">Send Email</button>
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="message @(isSuccess ? "success-message" : "error-message")">
            @statusMessage
        </div>
    }
</div>

@code {
    private string name;
    private string message;
    private string selectedContactId;
    private string statusMessage;
    private bool isSuccess;
    private List<Contact> contacts = new List<Contact>(); // Initialize the contacts list


    protected override async Task OnInitializedAsync()
    {
        await LoadContacts(); // Load contacts asynchronously
    }

    private async Task LoadContacts()
    {
        contacts = await contactService.GetContacts();
    }

    private async Task SendEmail()
    {
        string templateFilePath = "EmailTemplates/template1.html"; // Relative path to your template file
        Dictionary<string, string> placeholders = new Dictionary<string, string>()
        {
            { "%NAME%", name },
            { "%MESSAGE%", message }
        };

        var configuration = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
            .Build();

        var username = configuration.GetSection("Email")["UserName"];
        var password = configuration.GetSection("Email")["Password"];
        string emailBody = templateService.LoadTemplate(templateFilePath, placeholders);

        var emailMessage = new MimeMessage();
        emailMessage.From.Add(new MailboxAddress("Sender Name", username));
        emailMessage.Subject = "Sample Email";

        var bodyBuilder = new BodyBuilder();
        bodyBuilder.HtmlBody = emailBody;
        emailMessage.Body = bodyBuilder.ToMessageBody();

        var selectedContact = contacts.FirstOrDefault(c => c.Account.Name == selectedContactId);
        if (selectedContact != null)
        {
            emailMessage.To.Add(new MailboxAddress(selectedContact.Account.Name, selectedContact.Account.EmailAddress));
        }

        try
        {
            using (var client = new SmtpClient())
            {
                await client.ConnectAsync("smtp.gmail.com", 587, false);
                await client.AuthenticateAsync(username, password);
                await client.SendAsync(emailMessage);
                await client.DisconnectAsync(true);

                isSuccess = true;
                statusMessage = "Email sent successfully!";
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            statusMessage = $"Failed to send email: {ex.Message}";
        }
    }
}
